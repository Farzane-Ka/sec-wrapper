fmod LIST-INT is protecting INT .sorts List NeList . subsorts Int < NeList < List .op nil : -> List [ctor] .op _ _ : List List -> List [assoc id: nil ctor] .op _ _ : NeList NeList -> NeList [assoc id: nil ctor] .op length : List -> Nat . ops first last : NeList -> Int .op empty? : List -> Bool . op rest : NeList -> List .op reverse : List -> List . op _occursIn_ : Int List -> Bool .op max : NeList -> Int . op isSorted : List -> Bool .vars I J : Int . var L : List .eq length(nil) = 0 . eq length(I L) = 1 + length(L) .eq first(I L) = I . eq last(L I) = I .eq I occursIn nil = false .eq I occursIn J L = (I == J) or (I occursIn L) .endfm