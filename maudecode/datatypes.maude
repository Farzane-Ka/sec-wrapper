*** This will be the library of Creol's functional datatypes
fmod DATA is 
protecting META-LEVEL .
pr QID .
pr STRING .
pr INT .
pr NAT .
pr FLOAT .
sorts IntGT BoolGT NatGT StringGT FloatGT .  *** Qid = local variable ident
sorts AidGT  DataGT DataG DataFid Aid AidTag Fid Oid Wid OidTag  QidTag Data Expr Undef Data? DataTag FlowSen .         *** Aid = attribute identifier
***sorts Oid Fid < Wid .
sorts Tag Level TagList PcStack NePcStack .
subsort Tag < NePcStack < PcStack .
sorts  IntTag BoolTag NatTag StrTag FloatTag  .
subsort NatTag < IntTag .
subsort Level < Tag .
subsort Oid < Data < Expr .
subsort OidTag < DataTag < Expr .
subsort Qid < Aid < Expr .
subsort QidTag < AidTag < Expr .          *** Fid = Future identifier
subsorts Fid   < Expr .
subsorts DataFid  < DataGT  < Expr .
subsorts DataTag Data < DataG < DataGT < Expr .
subsorts IntTag  Int < IntGT . subsorts BoolTag  Bool < BoolGT . subsorts NatTag Nat < NatGT .
subsorts StrTag  String < StringGT . subsorts FloatTag Float < FloatGT .
sorts   EmpList EmpListTag AidList AidListTag ExprListTag ExprList DataList DataListTag .
subsort Aid < AidList < ExprList .
subsort AidTag < AidListTag < ExprList .
subsort Aid AidTag < AidGT < AidListGT < ExprList . 
subsort Expr < ExprList .
subsort Data < DataList  < ExprList .
subsort DataTag < DataGT < DataListTag  < ExprList .
subsort Undef  DataList < DataListTag < Data? .
subsort EmpList < DataList AidList .
subsort EmpListTag < DataListTag AidListTag .
subsort EmpList < Data? .
sorts DataListGT AidListGT EmpListGT .
subsort DataList DataListTag < DataListGT .
subsort AidList AidListTag < AidListGT .
subsort EmpList EmpListTag < EmpListGT .
subsort Tag < TagList .

op emp  :                     -> EmpList [ctor] .
op __  :  EmpList Tag             -> EmpListTag [ctor] .
op _,,_ : ExprList  ExprList  -> ExprList [ctor assoc id: emp prec 25] .
op _,,_ : DataList  DataList  -> DataList [ctor ditto] .
op _,,_ : DataListTag  DataListTag  -> DataListTag [ctor ditto] .
op _,,_ : TagList  TagList  -> TagList [ctor assoc ] .
op _,,_ : EmpList   EmpList   -> EmpList [ctor ditto] .
op _,,_ : EmpListTag   EmpListTag   -> EmpListTag [ctor ditto] .
*** op _,,_ : NeExprList ExprList -> NeExprList [ctor ditto] .
*** op _,,_ : ExprList NeExprList -> NeExprList [ctor ditto] .
op __ : Data Tag -> DataTag [ctor] .
op __ : Oid Tag -> OidTag [ctor] .
op __ : Aid Tag -> AidTag [ctor] .
op __ : Qid Tag -> QidTag [ctor] .
op __ : Bool Tag -> BoolTag [ctor] .
***op __ : Nat Tag -> NatTag [ctor] .
op __ : String Tag -> StrTag [ctor] .
op __ : Int Tag -> IntTag [ctor] .
op __ : Float Tag -> FloatTag [ctor] .
***op __ : DataList Tag -> DataListTag [ctor] .
op outTag   : Expr     -> Tag .
op outTag   : DataList     -> Tag .
op outTag   : DataList     -> Tag .
op outTagList   : DataListGT     -> TagList .
op outTagList   : AidListGT     -> TagList .
op outTagPC : PcStack  -> Tag .
op outDTag  : Expr     -> Data .
op outDTag  : BoolGT     -> Bool .
op outDTag  : AidGT     -> Aid .
op join     : Tag Tag  -> Tag .
op join     : TagList  -> Tag .
op addTag   : Expr Tag -> Tag .

op fid : Oid Nat -> Fid  [ctor] .
***op nTfid : Nat -> Fid .
op noAid : -> AidList .
op _,,_  : AidList AidList -> AidList [ctor ditto] .
op _,,_  : AidListTag AidListTag -> AidListTag [ctor ditto] .
op _,,_  : AidListGT AidListGT -> AidListGT [ctor ditto] .

eq noAid = emp . *** if ok may remove noAid !

op _[[_]] : Qid ExprList -> Expr . *** function application
op _[[_]] : Qid DataList -> DataG . *** function application
op _[[_]] : Qid DataListTag -> DataTag .
*** Basic conversion of data types into sort Data
op on      :           -> FlowSen .
***op off     :           -> FlowSen .
op h       :           -> Level . *** high level
op l       :           -> Level . ***low level
op null    :           -> Data [ctor] . *** undef. value/none pointer
op undef   :           -> Data [ctor] . *** undef. value of future
op ob      : Qid       -> Oid  [ctor] .
op int(_)  : Int       -> Data [ctor format(o o ! o o)] .
op int(_)  : IntTag       -> DataTag [ctor format(o o ! o o)] .
op nat(_)  : Nat       -> Data [ctor format(o o ! o o)] .
op nat(_)  : NatTag       -> DataTag [ctor format(o o ! o o)] .  
op float(_): Float     -> Data [ctor format(o o ! o o)] . 
op float(_): FloatTag     -> DataTag [ctor format(o o ! o o)] . 
op str(_)  : String    -> Data [ctor format(o o ! o o)] .
op str(_)  : StrTag    -> DataTag [ctor format(o o ! o o)] .
op bool(_) : Bool      -> Data [ctor format(o o ! o o)] .
op bool(_) : BoolTag      -> DataTag [ctor format(o o ! o o)] .

op lab     : NatGT       -> DataG [ctor].             *** label values
op fidData(_)  : Fid -> DataFid [ctor].

*** Reconversion for evaluation
op _asInt             : DataG -> IntGT .
op _asNat             : DataG -> NatGT .
op _asFid             : DataFid -> Fid . ***future
op _asBool            : DataG -> BoolGT .
op _asStr             : DataG -> StringGT .

op empPC       : -> PcStack .
op __          : PcStack PcStack -> PcStack [assoc id: empPC ctor] .
op __          : NePcStack PcStack -> NePcStack [assoc id: empPC ctor] .
op __          : PcStack NePcStack -> NePcStack [assoc id: empPC ctor] . 
op empty?      : PcStack -> Bool .
ops first last : NePcStack -> Tag .
op rest        : PcStack -> PcStack . 

var N : Nat .    var I : Int . 
var B : Bool .   var S : String .
var Q : Qid .    var TAG TAG' : Tag . var D : Data . var O : Oid . var Fidd : Fid .
var DGT : DataGT . var DL : DataListGT . 
var PCSTK : PcStack . var NEPCSTK : NePcStack . var D? : Data? .
var A A' : AidGT .    var AL AL' : AidListGT . var AID : Aid .
vars TAGList TAGList' : TagList .

eq fid(O,N)    asFid      = fid(O,N) .
eq int(I)  asInt      = I . 
eq int(N)  asNat      = N .  *** otherwise error, i.e. irreducible...
eq bool(B) asBool     = B .
eq str(S)  asStr      = S .
eq fidData(Fidd) asFid      = Fidd .
eq int(I TAG)  asInt      = I TAG . 
eq int(N TAG)  asNat      = N TAG .  *** otherwise error, i.e. irreducible...
eq bool(B TAG) asBool     = B TAG .
eq ((bool(B) TAG)) asBool     = B TAG .
eq str(S TAG)  asStr      = S TAG .
eq int (I TAG) = int(I) TAG .
eq str (S TAG) = str(S) TAG .
eq nat (N TAG) = nat(N) TAG .
eq bool (B TAG) = bool(B) TAG .

eq empty?(empPC)    = true .
eq empty?(NEPCSTK)  = false .
eq first(TAG PCSTK) = TAG .
eq rest (TAG PCSTK) = PCSTK .
eq rest(empPC)      = empPC .
eq outTagPC(NEPCSTK) = first(NEPCSTK) .
eq outTagPC(empPC)  = l .
eq outTag (D TAG)   = TAG .
eq outTag (D )      = l .
eq outTag (emp TAG)  = TAG .
eq outTag (emp)  = l .
eq outTag(A TAG) = TAG .
eq outTag(A ) = l .
eq outDTag (D TAG)  = D .
eq outDTag (D)  = D .
eq outDTag (B TAG) = B .
eq outDTag (B) = B .
eq outDTag (AID) = AID .
eq outDTag (AID TAG) = AID .
eq outTagList (A ,, AL) = outTag(A) ,, outTagList(AL) .
eq outTagList (emp)  = l .
eq outTagList (A)  = outTag(A) .
eq outTagList (DGT ,, DL) = outTag(DGT) ,, outTagList(DL) .
eq outTagList (DGT)  = outTag(DGT) .



ceq join(TAG,TAG')  = h if (TAG == h or TAG' == h) .
ceq join(TAG,TAG')  = l if (TAG =/= h and TAG' =/= h) .
eq addTag(D TAG, TAG') = join (TAG,TAG') .
eq addTag(D , TAG') = join (l,TAG') .
eq join(TAG) = TAG .
eq join(TAG ,, TAG' ,, TAGList)  = join(join(TAG,TAG') ,, TAGList) .
ceq join(TAG ,, TAG')  = l if (TAG =/= h and TAG' =/= h) .
ceq join(TAG ,, TAG')  = h if (TAG == h or TAG' == h) .

*** PREDEFINED INFIX NOTATION 

ops neg_  not_            : Expr -> Expr . *** removed #_ for length
ops _.fst _.scd           : Expr -> Expr .  *** first and second part of pair
ops _add_ _min_ _mult_ _div_ : Expr Expr -> Expr .
*** ops _+_ _-_ _*_ _/_ : Expr Expr -> Expr . 
ops _<_ _<=_ _>_ _>=_     : Expr Expr -> Expr .
ops _or_ _and_		  : Expr Expr -> Expr .
ops _=/=_ _==_		  : Expr Expr -> Expr .
ops _cat_  _|-|_ 	  : Expr Expr -> Expr . *** alternative notations
ops _|-_  _-|_ 	          : Expr Expr -> Expr .
ops _bw_  _ew_	          : Expr Expr -> Expr .
ops _<_ _<=_ _>_ _>=_     : Tag Tag -> Bool .
ops _<_ _<=_ _>_ _>=_     : TagList TagList -> Bool .

*** red int(4) .
*** red int(4) asInt .

*** translation from infix to prefix notation
vars E E' : Expr .

eq not E	 = 'not[[E]].
eq neg E	 = 'neg[[E]].
eq E add E'	 = 'plus [[E ,, E']].
eq E min E'	 = 'minus [[E ,, E']].
eq E mult E'	 = 'times [[E ,, E']].
eq E div E'	 = 'div [[E ,, E']].
eq E <  E'	 = 'less[[E ,, E']]. 
eq E <= E'	 = 'lessEq[[E ,, E']].
eq E >  E'	 = 'less[[E' ,, E]].
eq E >= E'	 = 'lessEq[[E' ,, E]].
eq (E ==  E')	 = 'equal[[E ,, E']].
eq (E =/=  E')	 = 'not[['equal[[E ,, E']]]].

eq E and E'	 = 'and[[E ,, E']].
eq E or  E'	 = 'or[[E ,, E']].
eq E .fst	 = 'fst[[E]].      *** pair-functions
eq E .scd	 = 'scd[[E]].
eq E bw E'	 = 'begwith[[E ,, E']] .
eq E ew E'	 = 'endwith[[E ,, E']] .
eq E cat E'      = 'plus [[E ,, E']]. 
eq E |-| E'      = 'plus [[E ,, E']]. 
eq E |- E'       = 'add[[E ,, E']] .      *** appendright
eq E -| E'       = 'addFirst[[E ,, E']] . *** appendleft
eq l <= h        = true .
eq l <= l        = true .
eq h <= l        = false .
eq h <= h        = true .
eq (TAG ,, TAGList) <= (TAG' ,, TAGList')   =  (TAG <= TAG') and (TAGList <= TAGList') .
endfm  

fmod DATATYPES is  
*** may easily keep various data types on separate file(s), 
*** and plug in upon need.
pr DATA .

op list : ExprList     -> Expr . *** lists
op list : DataList     -> Data [ctor] . *** lists of data
op list : DataListTag     -> DataTag [ctor] . *** lists of data
op setl : ExprList     -> Expr .        *** set
op setl : DataList     -> Data [ctor] . *** set
op setl : DataListTag     -> DataTag [ctor] . *** set
op pair : Expr Expr    -> Expr .        *** pairs
op pair : Data Data    -> Data [ctor] . *** pairs
op pair : DataTag DataTag    -> DataTag [ctor] . *** pairs

vars I I'     : Int .
vars N        : Nat .
vars F F'     : Float .
vars S S'     : String . 
vars D D'     : Data .
vars ITAG ITAG'     : Int .
vars NTAG        : NatTag .
vars FTAG FTAG'     : FloatTag .
vars STAG STAG'     : StrTag . 
vars DTAG DTAG'     : DataTag .
vars E E'     : Expr .
vars L L' L'' : ExprList .
var TAG TAG' : Tag .

*** reduction for sets 
eq  setl(L ,, E ,, L' ,, E ,, L'') = setl(L ,, E ,, L' ,, L'') .
ceq setl(D ,, D' ,, L) = setl(D' ,, D ,, L) if (D > D')asBool .
ceq setl(DTAG ,, DTAG' ,, L) = setl(DTAG' ,, DTAG ,, L) if (DTAG > DTAG')asBool .
*** ceq setl(L ,, D ,, L' ,, D' ,, L'') = setl(L ,, D' ,, L' ,, D ,, L'') 
*** if (D > D')asBool . *** old

*** EVALUATION      
*** eq char(int(I))	= str(char(I)) .
eq 'neg[[int(I)]]	= int(-(I)) .
eq 'fst[[pair(E, E')]]   = E . 
eq 'scd[[pair(E, E')]]   = E' .
eq 'neg[[int(I) TAG]]	= int(-(I)) TAG .
***
eq 'neg[[int(I TAG)]]	= int((-(I)) TAG) .
eq 'neg[[int(I) TAG]]	= int(-(I)) TAG .

*** equal-func for all (!) data types
eq 'equal[[D ,, D']]	       = bool(D == D') .
eq 'equal[[DTAG ,, DTAG']]	       = bool(outDTag(DTAG) == outDTag(DTAG')) join(outTag(DTAG),outTag(DTAG')) .
eq 'equal[[DTAG ,, D]]	       = bool(outDTag(DTAG) == D) join(outTag(DTAG), l) .
eq 'equal[[D ,, DTAG]]	       = bool(D == outDTag(DTAG)) join(l, outTag(DTAG)) .

*** bool-functions
eq 'not[[bool(false)]]    = bool(true) .  
eq 'not[[bool(true )]]    = bool(false) .
eq 'or[[bool(true),,   E]] = bool(true) .
eq 'or[[bool(false),,  E]] =  E .
eq 'and[[bool(false),, E]] = bool(false) .
eq 'and[[bool(true),,  E]] =  E .
***
eq 'not[[bool(false TAG)]]    = bool(true TAG) .  
eq 'not[[bool(true TAG )]]    = bool(false TAG) .
eq 'or[[bool(true TAG),,   E]] = bool(true TAG) .
eq 'or[[bool(false TAG),,  E]] =  E addTag(E,TAG) .
eq 'and[[bool(false TAG),, E]] = bool(false TAG) .
eq 'and[[bool(true TAG),,  E]] =  E addTag(E,TAG) .

***
eq 'not[[bool(false) TAG]]    = bool(true) TAG .  
eq 'not[[bool(true) TAG ]]    = bool(false) TAG .
eq 'or[[(bool(true) TAG) ,,   E]] = bool(true) TAG .
eq 'or[[(bool(false) TAG) ,,  E]] =  E addTag(E,TAG) .
eq 'and[[(bool(false) TAG) ,, E]] = bool(false) TAG .
eq 'and[[(bool(true) TAG) ,,  E]] =  E addTag(E,TAG) .

*** less-func
eq 'less  [[int(I) ,, int(I')]] = bool(I < I') .
eq 'lessEq[[int(I) ,, int(I')]] = bool(I <= I') .
eq 'less  [[float(F) ,, float(F')]] = bool(F < F') .
eq 'lessEq[[float(F) ,, float(F')]] = bool(F <= F') .
eq 'less  [[str(S) ,, str(S')]] = bool(S < S') .
eq 'lessEq[[str(S) ,, str(S')]] = bool(S <= S') .
***
eq 'less  [[int(I TAG) ,, int(I' TAG')]] = bool(I < I') join(TAG,TAG') .
eq 'lessEq[[int(I TAG) ,, int(I' TAG')]] = bool(I <= I') join(TAG,TAG') .
eq 'less  [[float(F TAG) ,, float(F' TAG')]] = bool(F < F') join(TAG,TAG')  .
eq 'lessEq[[float(F TAG) ,, float(F' TAG')]] = bool(F <= F') join(TAG,TAG') .
eq 'less  [[str(S TAG) ,, str(S' TAG')]] = bool(S < S') join(TAG,TAG') .
eq 'lessEq[[str(S TAG) ,, str(S' TAG')]] = bool(S <= S') join(TAG,TAG') .
***eq 'lessEq[[TAG ,, TAG'] = bool(TAG <= TAG') .
eq 'less  [[int(I) ,, (int(I') TAG')]] = bool(I < I') TAG' .
eq 'lessEq[[int(I) ,, (int(I') TAG')]] = bool(I <= I') TAG' .
eq 'less  [[float(F TAG) ,, float(F' TAG')]] = bool(F < F') join(TAG,TAG')  .
eq 'lessEq[[float(F TAG) ,, float(F' TAG')]] = bool(F <= F') join(TAG,TAG') .
eq 'less  [[str(S TAG) ,, str(S' TAG')]] = bool(S < S') join(TAG,TAG') .
eq 'lessEq[[str(S TAG) ,, str(S' TAG')]] = bool(S <= S') join(TAG,TAG') .
eq 'less  [[int(I TAG') ,, int(I')]] = bool(I < I') TAG' .
eq 'lessEq[[int(I TAG') ,, int(I')]] = bool(I <= I') TAG' .
eq 'less  [[float(F) ,, float(F') TAG']] = bool(F < F') TAG'  .
eq 'lessEq[[float(F) ,, float(F') TAG']] = bool(F <= F') TAG' .
eq 'less  [[str(S TAG) ,, str(S' TAG')]] = bool(S < S') join(TAG,TAG') .
eq 'lessEq[[str(S TAG) ,, str(S' TAG')]] = bool(S <= S') join(TAG,TAG') .


*** list-functions
eq 'head[[list(emp)]]	= null .
eq 'head[[list(E,, L)]]	= E .
eq 'last[[list(emp)]]	= null .
eq 'last[[list(L,, E)]]	= E .
eq 'rest[[list(emp)]]	= null .
eq 'rest[[list(L,, E)]]	= list(L) .
eq 'tail[[list(emp)]]	= null .
eq 'tail[[list(E,, L)]]	= list(L) .

***eq 'length[[list(null)]]  = int(0) .
eq 'length[[list(emp)]]   = int(0) .
eq 'length[[list(E,, L)]] = int(1) add ('length[[list(L)]]) .
eq 'length[[setl(E,, L)]] = int(1) add ('length[[setl(L)]]) .

eq 'isempty[[list(emp)]]  = bool(true) .
eq 'isempty[[list(E,,L)]] = bool(false) .

eq 'remove[[list(E) ,,  E']]  = if  E == E' then list(emp) else list(E) fi .
eq 'remove[[list(emp),, E ]]  = list(emp) .
eq 'remove[[list(E,,L),,E']]  = if E == E' then 'remove[[(list(L)),, E']] 
			  else 'plus[[list(E),, ('remove[[(list(L)),, E']])]] fi .
eq 'remove[[setl(E),,   E']]  = if  E == E' then setl(emp) else setl(E) fi .
eq 'remove[[setl(emp),, E ]]  = setl(emp) .
eq 'remove[[setl(E,,L),, E']] = if E == E' then setl(L)
			 else 'plus[[setl(E),,('remove[[(setl(L)),, E']])]] fi .
 
eq 'appendLeft [[list(L),, E]]    = list(E ,, L) .
eq 'addFirst   [[list(L),, E]]    = list(E ,, L) .   *** alias
eq 'appendRight[[list(L),, E]]    = list(L ,, E) .
eq 'add[[list(L),,    E]]         = list(L ,, E) .    *** alias
eq 'add[[setl (L),,    E]]        = setl(L ,, E) .    

eq 'has[[list(emp),, E ]]	  = bool(false) .
eq 'has[[list(E ,, L),, E']]      = if (E' == E) then bool(true)
			      else 'has[[list(L),, E']] fi .
eq 'has[[setl(emp),,  E ]]	  = bool(false) .
eq 'has[[setl(E ,, L),,  E']]     = if (E' == E) then bool(true)
			      else 'has[[setl(L),, E']] fi .
***index starts at 1
eq 'after[[list(emp),, int(N)]]   = null . 
eq 'after[[list(E,, L),, int(0)]] = list(E ,, L) .
eq 'after[[list(E,, L),, int(N)]] = 'after[[(list(L)),, (int(N) min int(1))]] .

eq 'index[[(list(L)),,   int(0)]] = null .
eq 'index[[(list(emp)),, int(N)]] = null .
eq 'index[[(list(E,,L)),,int(N)]] = if (N == 1) then E else
				  'index[[(list(L)),, int( _-_(N,1))]] fi .

eq 'begwith[[list(E),, E']]       = bool('head[[(list(E))]] == E') .
eq 'begwith[[list(E ,, L),, E']]  = bool('head[[(list(E ,, L))]] == E') .
eq 'endwith[[list(E),, E']]       = bool('last[[(list(E))]] == E') .
eq 'endwith[[list(E ,, L),, E']]  = bool('last[[(list(L))]] == E') .

eq 'plus  [[list(L),, list(L')]]  = list(L ,, L') .
eq 'plus  [[setl(L),, setl(L')]]  = setl(L ,, L') .
eq 'plus  [[str(S),, str(S')]]    = str(S + S') .
eq 'plus  [[int(I),, int(I')]]    = int(I + I') .
eq 'plus  [[float(F),,float(F')]] = float(F + F') .
****
eq 'plus  [[str(S TAG),, str(S' TAG')]]    = str(S + S') join(TAG,TAG') .
eq 'plus  [[(str(S) TAG),, (str(S') TAG')]]    = str(S + S') join(TAG,TAG') .
eq 'plus  [[(str(S) TAG),, (str(S'))]]    = str(S + S') (TAG) .
eq 'plus  [[str(S) ,, (str(S' TAG'))]]    = str(S + S') TAG' .
eq 'plus  [[int(I TAG),, int(I' TAG')]]    = int(I + I') join(TAG,TAG') .
eq 'plus  [[float(F TAG),,float(F' TAG')]] = float(F + F') join(TAG,TAG') .


eq 'plus  [[int(I TAG),, int(I')]]    = int(I + I') TAG .
eq 'plus  [[(int(I) TAG) ,, int(I')]]    = int(I + I') TAG .
eq 'plus  [[float(F TAG) ,, float(F')]] = float(F + F') TAG .
eq 'plus  [[(float(F) TAG) ,, float(F')]] = float(F + F') TAG .


eq 'minus [[int(I),, int(I')]]    = int( _-_(I, I')) .
eq 'minus [[float(F),, float(F')]]= float(_-_(F, F')) .
***
eq 'minus [[int(I TAG),, int(I' TAG')]]    = int( _-_(I, I')) join(TAG,TAG') .
eq 'minus [[float(F TAG),, float(F' TAG')]]= float(_-_(F, F')) join(TAG,TAG') .
eq 'minus [[(int(I TAG)),, int(I')]]    = int( _-_(I, I')) TAG .
eq 'minus [[(int(I) TAG),, (int(I') TAG')]]    = int( _-_(I, I')) join(TAG,TAG') .
eq 'minus [[(int(I) TAG),, int(I')]]    = int( _-_(I, I')) TAG .
eq 'minus [[int(I),, (int(I') TAG')]]    = int( _-_(I, I')) TAG' .
eq 'minus [[float(F TAG),, float(F' TAG')]]= float(_-_(F, F')) join(TAG,TAG') .
eq 'minus [[(float(F) TAG),, float(F') TAG']]= float(_-_(F, F')) join(TAG,TAG') .
eq 'minus [[(float(F) TAG),, float(F')]]= float(_-_(F, F')) TAG .
eq 'minus [[float(F TAG),, float(F')]]= float(_-_(F, F')) TAG .

eq 'times [[int(I),, int(I')]]    = int(I * I')  .
eq 'times [[float(F),,float(F')]] = float(F * F') .
***
eq 'times [[int(I TAG),, int(I' TAG')]]    = int(I * I') join(TAG,TAG') .
eq 'times [[float(F TAG),,float(F' TAG')]] = float(F * F') join(TAG,TAG') .

eq 'div   [[int(I),, int(I')]]    = int(I quo I') .
eq 'div   [[float(F),,float(F')]] = float(F / F') .
***
eq 'div   [[int(I TAG),, int(I' TAG')]]    = int(I quo I') join(TAG,TAG') .
eq 'div   [[float(F TAG),,float(F' TAG')]] = float(F / F') join(TAG,TAG') .

eq  'setl[[list(L)]] = setl(L) .
eq  'list[[setl(L)]] = list(L) .
***var Q : Qid .
***eq  Q[[setl(L),, setl(L')]] = 'setl[[Q[[list(L),, list(L')]]]].

endfm
